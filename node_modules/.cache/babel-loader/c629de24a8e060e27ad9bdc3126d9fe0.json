{"ast":null,"code":"import _objectSpread from \"/Users/moyen 1/Work/React/cryptodash/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/moyen 1/Work/React/cryptodash/src/App/AppProvider.js\";\nimport React, { Component } from 'react';\n\nconst cc = require('cryptocompare');\n\nexport const AppContext = React.createContext();\nexport class AppProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.fetchcoins();\n    };\n\n    this.fetchcoins = async () => {\n      let coinList = (await cc.coinList()).Data;\n      this.setState({\n        coinList\n      });\n    };\n\n    this.confirmFavorites = () => {\n      this.setState({\n        firstVisit: false,\n        page: 'dashboard'\n      });\n      localStorage.setItem('cryptoDash', JSON.stringify({\n        test: 'hello'\n      }));\n    };\n\n    this.setPage = page => this.setState({\n      page\n    });\n\n    this.state = _objectSpread({\n      page: 'dashboard'\n    }, this.savedSettings(), {\n      setPage: this.setPage,\n      confirmFavorites: this.confirmFavorites\n    });\n  }\n\n  savedSettings() {\n    let cryptoDashData = JSON.parse(localStorage.getItem('cryptoDash'));\n\n    if (!cryptoDashData) {\n      return {\n        page: 'settings',\n        firstVisit: true\n      };\n    }\n\n    return {};\n  }\n\n  render() {\n    return React.createElement(AppContext.Provider, {\n      value: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}","map":{"version":3,"sources":["/Users/moyen 1/Work/React/cryptodash/src/App/AppProvider.js"],"names":["React","Component","cc","require","AppContext","createContext","AppProvider","constructor","props","componentDidMount","fetchcoins","coinList","Data","setState","confirmFavorites","firstVisit","page","localStorage","setItem","JSON","stringify","test","setPage","state","savedSettings","cryptoDashData","parse","getItem","render","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AACA,OAAO,MAAMC,UAAU,GAAGJ,KAAK,CAACK,aAAN,EAAnB;AACP,OAAO,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AACvCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBC,iBAVmB,GAUC,MAAM;AACtB,WAAKC,UAAL;AACH,KAZkB;;AAAA,SAcnBA,UAdmB,GAcN,YAAY;AACrB,UAAIC,QAAQ,GAAG,CAAC,MAAMT,EAAE,CAACS,QAAH,EAAP,EAAsBC,IAArC;AACA,WAAKC,QAAL,CAAc;AAACF,QAAAA;AAAD,OAAd;AACH,KAjBkB;;AAAA,SAmBnBG,gBAnBmB,GAmBA,MAAM;AACrB,WAAKD,QAAL,CAAc;AACVE,QAAAA,UAAU,EAAC,KADD;AAEVC,QAAAA,IAAI,EAAE;AAFI,OAAd;AAIAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCC,IAAI,CAACC,SAAL,CAAe;AAC9CC,QAAAA,IAAI,EAAE;AADwC,OAAf,CAAnC;AAGH,KA3BkB;;AAAA,SAmCnBC,OAnCmB,GAmCTN,IAAI,IAAI,KAAKH,QAAL,CAAc;AAACG,MAAAA;AAAD,KAAd,CAnCC;;AAEf,SAAKO,KAAL;AACIP,MAAAA,IAAI,EAAE;AADV,OAEO,KAAKQ,aAAL,EAFP;AAGIF,MAAAA,OAAO,EAAE,KAAKA,OAHlB;AAIIR,MAAAA,gBAAgB,EAAE,KAAKA;AAJ3B;AAMH;;AAoBDU,EAAAA,aAAa,GAAG;AACZ,QAAIC,cAAc,GAAGN,IAAI,CAACO,KAAL,CAAWT,YAAY,CAACU,OAAb,CAAqB,YAArB,CAAX,CAArB;;AACA,QAAI,CAACF,cAAL,EAAqB;AACjB,aAAO;AAACT,QAAAA,IAAI,EAAE,UAAP;AAAmBD,QAAAA,UAAU,EAAE;AAA/B,OAAP;AACH;;AACD,WAAO,EAAP;AACH;;AAEDa,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,UAAD,CAAY,QAAZ;AAAqB,MAAA,KAAK,EAAI,KAAKL,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKf,KAAL,CAAWqB,QADZ,CADJ;AAKH;;AA3CsC","sourcesContent":["import React, { Component } from 'react'\nconst cc = require('cryptocompare');\nexport const AppContext = React.createContext();\nexport class AppProvider extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            page: 'dashboard',\n            ...this.savedSettings(),\n            setPage: this.setPage,\n            confirmFavorites: this.confirmFavorites \n        }\n    }\n\n    componentDidMount = () => {\n        this.fetchcoins();\n    }\n\n    fetchcoins = async () => {\n        let coinList = (await cc.coinList()).Data;\n        this.setState({coinList})\n    }\n\n    confirmFavorites = () => {\n        this.setState({\n            firstVisit:false,\n            page: 'dashboard'\n        });\n        localStorage.setItem('cryptoDash', JSON.stringify({\n            test: 'hello'\n        }));\n    }\n    savedSettings() {\n        let cryptoDashData = JSON.parse(localStorage.getItem('cryptoDash'));\n        if (!cryptoDashData) {\n            return {page: 'settings', firstVisit: true}\n        }\n        return {};\n    }\n    setPage = page => this.setState({page})\n    render() {\n        return (\n            <AppContext.Provider value = {this.state}>\n            {this.props.children}\n            </AppContext.Provider>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}